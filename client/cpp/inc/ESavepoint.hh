/*
 * ESavepoint.hh
 *
 *  Created on: 2017-7-4
 *      Author: cxxjava@163.com
 */

#ifndef ESAVEPOINT_HH_
#define ESAVEPOINT_HH_

#include "Efc.hh"
#include "../inc/ESQLException.hh"

namespace efc {
namespace edb {

/**
 * The representation of a savepoint, which is a point within
 * the current transaction that can be referenced from the
 * <code>Connection.rollback</code> method. When a transaction
 * is rolled back to a savepoint all changes made after that
 * savepoint are undone.
 * <p>
 * Savepoints can be either named or unnamed. Unnamed savepoints
 * are identified by an ID generated by the underlying data source.
 *
 * @since 1.4
 */

class ESavepoint: public efc::EObject {
public:
	/**
	 *
	 */
	ESavepoint(const char* name=null);

	/**
	 * Retrieves the generated ID for the savepoint that this
	 * <code>Savepoint</code> object represents.
	 * @return the numeric ID of this savepoint
	 * @exception SQLException if this is a named savepoint
	 * @since 1.4
	 */
	int getSavepointId() THROWS(ESQLException);

	/**
	 * Retrieves the name of the savepoint that this <code>Savepoint</code>
	 * object represents.
	 * @return the name of this savepoint
	 * @exception SQLException if this is an un-named savepoint
	 * @since 1.4
	 */
	EString getSavepointName() THROWS(ESQLException);

	/**
	 *
	 */
	void invalidate();

private:
	static EAtomicCounter IDGenerator;
	int _id;
	EString _name;
	boolean _isValid;
	boolean _isNamed;
};

} /* namespace edb */
} /* namespace efc */
#endif /* ESAVEPOINT_HH_ */
